mod resource;

/// # Description
/// A module for resources, that can be automatically generated by the engine.
/// When requesting the engine looks for the resource,if it doesnt exist the
/// engine generates the values and later returns the resource. So when accessing
/// the data for the first time it might take a bit longer, but the following access
/// will be blazing fast.
pub mod lazy_resources {
    use crate::resource::{LazyResourceIdentifier, Resource};

    /// # Description
    /// A function to request some lazy resource from the manager.
    ///
    /// # Example
    ///
    /// ```
    /// let stone = resource_manager::lazy_resources::request_resource(TextureIdentifier("path/to/the/image.jpg"));
    /// let texture = match stone {
    ///     TEXTURE(texture) => Ok(texture),
    ///     _ => Err(()),
    /// };
    /// ```
    pub fn request_resource(identifier: LazyResourceIdentifier) -> Resource {
        todo!();
    }

    /// # Description
    /// A function to remove some lazy resource from the manager and clearing its memory.
    ///
    /// # Example
    ///
    /// ```
    /// let stone = resource_manager::lazy_resources::request_resource(TextureIdentifier("path/to/the/image.jpg"));
    /// let texture = match stone {
    ///     TEXTURE(texture) => Ok(texture),
    ///     _ => Err(()),
    /// };
    ///
    /// //Do something with it
    ///
    /// //No longer need the texture
    /// resource_manager::lazy_resources::remove_resource(TextureIdentifier("path/to/the/image.jpg"));
    /// ```
    pub fn remove_resource(identifier: LazyResourceIdentifier) -> bool {
        todo!();
    }
}

/// # Description
/// A module for resources, that cannot be automatically generated by the engine,
/// mostly used for more complex data types or larger amounts of data.
/// When requesting the engine looks for the resource,if it doesnt exist the
/// engine cant do anything about it, else it returns the resource. So accessing
/// the data will always take the same amount of time.
pub mod static_resources {
    use std::rc::Rc;
    use crate::resource::{Resource, StaticResource, StaticResourceReference};

    /// # Description
    /// A function to add some static resource to the manager.
    ///
    /// # Example
    ///
    /// ```
    /// let prefab = Prefab::new();
    /// let reference = resource_manager::static_resources::add_resource(PrefabResource(prefab));
    /// ```
    pub fn add_resource(resource: StaticResource) -> Rc<StaticResourceReference> {
        todo!();
    }

    /// # Description
    /// A function to receive some static resource from the manager via a reference.
    ///
    /// # Example
    ///
    /// ```
    /// let prefab = Prefab::new();
    /// let reference = resource_manager::static_resources::add_resource(PrefabResource(prefab));
    ///
    /// let resource = resource_manager::static_resources::receive_resource(&reference);
    /// let prefab = match resource {
    ///     PREFAB(prefab) => Ok(prefab),
    ///     _ => Err(())
    /// };
    /// ```
    pub fn receive_resource(reference: &Rc<StaticResourceReference>) -> Resource {
        todo!();
    }

    /// # Description
    /// A function to remove some static resource from the manager via a reference.
    ///
    /// # Example
    ///
    /// ```
    /// let prefab = Prefab::new();
    /// let reference = resource_manager::static_resources::add_resource(PrefabResource(prefab));
    ///
    /// let resource = resource_manager::static_resources::receive_resource(&reference);
    /// let prefab = match resource {
    ///     PREFAB(prefab) => Ok(prefab),
    ///     _ => Err(())
    /// };
    ///
    /// // Work with the data
    ///
    /// // dont need it anymore
    /// resource_manager::static_resources::remove_resource(&reference);
    /// ```
    pub fn remove_resource(reference: &Rc<StaticResourceReference>) -> bool {
        todo!()
    }
}